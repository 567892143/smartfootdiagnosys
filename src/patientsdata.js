import React, { useState, useEffect } from 'react';
import { db1 } from './firebase';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

function PatientsData() {
  
  const [patients, setPatients] = useState([]);


  useEffect(() => {
    const fetchPatients = async () => {
      const snapshot = await db1.collection('patients').get();
      const patientsData = snapshot.docs.map((doc) => {
        return { id: doc.id, ...doc.data() };
      });
      setPatients(patientsData);
    };

    fetchPatients();
  }, []);

  const handleRemovePatient = async (patientId) => {
    window.alert("you are removing patient data!");
    await db1.collection('patients').doc(patientId).delete();
    setPatients((prevPatients) =>
      prevPatients.filter((patient) => patient.id !== patientId)
    );
  };
  const handleDownloadPDF = async (patient) => {
    const doc = new jsPDF();

    // Set font style and size
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(18);
  
    // Add title
    doc.text('Patient Information', 60, 25);
    doc.setFontSize(12);
  doc.text(`Name: ${patient.name}`, 60, 35);
  doc.setFontSize(10);
  doc.text(`AGE: ${patient.age}`, 60, 40);
  doc.setFontSize(8);
  doc.text(`PHONENUMBER: ${patient.phoneNumber}`, 60, 45);
  
 const tableData = [];
    for (const key in patient) {
      if (patient.hasOwnProperty(key)) {
        const fieldLabel = key.charAt(0).toUpperCase() + key.slice(1);
        const fieldValue = patient[key];
        tableData.push([fieldLabel, fieldValue]);
      }
    }

    doc.autoTable({
      head: [['Field', 'Value']],
      body: tableData,
      startY: 50, // Adjust the starting y position as needed
      theme: 'striped', // Apply a striped theme to the table
    });
  
    tableData.push(['Field', 'Value']);
    
    tableData.push(['great toe Average', patient.leftfootpoint1avg]);
    tableData.push(['great toe  Max', patient.leftfootpoint1max]);
    tableData.push(['medial forefoot Average', patient.leftfootpoint2avg]);
    tableData.push(['medial forefoot Max', patient.leftfootpoint2max]);
    tableData.push(['Lateral forefoot Average', patient.leftfootpoint3avg]);
    tableData.push(['Lateral forefoot Max', patient.leftfootpoint3max]);
    tableData.push(['heel Average', patient.leftfootpoint4avg]);
    tableData.push(['heel Max', patient.leftfootpoint4max]);
    tableData.push([' Angle', patient.Angle]);
    tableData.push(['Acceleration', patient.Acceleration]);
    tableData.push(['Velocity', patient.Velocity]);
    tableData.push(['skin response', patient.gsr]);
    tableData.push(['thermal data', patient.temperature]);
    tableData.push(['EMG',patient.EMG]);
    tableData.push(['great toe Average', patient.rightfootpoint1avg]);
    tableData.push(['great toe  Max', patient.rightfootpoint1max]);
    tableData.push(['medial forefoot Average', patient.rightfootpoint2avg]);
    tableData.push(['medial forefoot Max', patient.rightfootpoint2max]);
    tableData.push(['lateral forefoot Average', patient.rightfootpoint3avg]);
    tableData.push(['lateral forefoot Max', patient.rightfootpoint3max]);
    tableData.push(['heel Average', patient.rightfootpoint4avg]);
    tableData.push(['heel Max', patient.rightfootpoint4max]);
    tableData.push([' Angle', patient.Angle]);
    tableData.push(['Acceleration', patient.Acceleration]);
    tableData.push(['Velocity', patient.Velocity]);
    tableData.push(['GSR Right', patient.gs1r]);
    tableData.push(['Temperature Right', patient.temperature1]);
    // Add footer with foot symbol
    doc.setFontSize(12);
    doc.text('This report is generated by Footryx', 10, doc.internal.pageSize.height - 10);
    doc.setFontSize(24);
    doc.text('\u00a9', doc.internal.pageSize.width - 25, doc.internal.pageSize.height - 15);
  
    // Save the PDF
    doc.save(`${patient.name}_Report.pdf`);
  };

  
  return (
    <div>
      <h1 className="bg-slate-500 h-16 text-white font-semibold text-3xl rounded">
        Patients Data
      </h1>
      <ul className="bg-gray-400 py-3 space-y-5">
        {patients.map((patient) => (
          <li
            key={patient.id}
            className="border-2 border-double border-zinc-900 space-x-2 space-y-2"
          >
            <p>Name: {patient.name}</p>
            <p>Age: {patient.age}</p>
            <p>Phone Number: {patient.phoneNumber}</p>
<p className='border-2'>great toe avg: {patient.leftfootpoint1avg}</p>
<p className='border-2'>great toe max: {patient.leftfootpoint1max}</p>
<p className='border-2' >medial forefoot avg: {patient.leftfootpoint2avg}</p>
<p className='border-2'>medial forefoot  max: {patient.leftfootpoint2max}</p>
<p className='border-2'>lateral forefoot avg: {patient.leftfootpoint3avg}</p>
<p className='border-2'>lateral forefoot max: {patient.leftfootpoint3max}</p>
<p className='border-2'>heel avg: {patient.leftfootpoint4avg}</p>
<p className='border-2'>heel max: {patient.leftfootpoint4max}</p>
<p className='border-2'>Footkinematics angle: {patient.Angle}</p>
<p className='border-2'>FootKinematics acceleration: {patient.Acceleration}</p>
<p className='border-2'>Footkinematics velocity: {patient.Velocity}</p>

<p className='border-2'>skin response: {patient.gsr}</p>
<p className='border-2'>thermal data: {patient.temperature}</p>
<p className='border-2'>EMG: {patient.EMG}</p>

<p className='border-2'>great toe avg: {patient.rightfootpoint1avg}</p>
<p className='border-2'>great toe max: {patient.rightfootpoint1max}</p>
<p className='border-2'>medial forefoot avg: {patient.rightfootpoint2avg}</p>
<p className='border-2'>medial forefoot max: {patient.rightfootpoint2max}</p>
<p className='border-2'>lateral forefoot avg: {patient.rightfootpoint3avg}</p>
<p className='border-2'>lateral forefoot max: {patient.rightfootpoint3max}</p>
<p className='border-2'>heel avg: {patient.rightfootpoint4avg}</p>
<p className='border-2'>heel max: {patient.rightfootpoint4max}</p>

<p className='border-2'>skin response: {patient.gs1r}</p>
<p className='border-2'>thermal data: {patient.temperature1}</p>
            
            
            <button
              onClick={() => handleRemovePatient(patient.id)}
              className="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-700"
            >
              Remove
            </button>
            <button
              onClick={() => handleDownloadPDF(patient)} // Pass the patient as an argument
              className="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700"
            >
              Download PDF
            </button>
          </li>
        ))}
      </ul>
      
      
    </div>
  );
}

export default PatientsData;
